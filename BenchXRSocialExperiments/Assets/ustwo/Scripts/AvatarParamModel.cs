using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class AvatarParamModel
{
    [RealtimeProperty(1, true, true)]
    private string _nickname;
    [RealtimeProperty(2, false, true)]
    private int _characterModelIndex;
    [RealtimeProperty(3, false, true)]
    private int _characterMaterialIndex;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class AvatarParamModel : RealtimeModel
{
    public string nickname
    {
        get
        {
            return _nicknameProperty.value;
        }
        set
        {
            if (_nicknameProperty.value == value) return;
            _nicknameProperty.value = value;
            InvalidateReliableLength();
            FireNicknameDidChange(value);
        }
    }

    public int characterModelIndex
    {
        get
        {
            return _characterModelIndexProperty.value;
        }
        set
        {
            if (_characterModelIndexProperty.value == value) return;
            _characterModelIndexProperty.value = value;
            InvalidateReliableLength();
            FireCharacterModelIndexDidChange(value);
        }
    }

    public int characterMaterialIndex
    {
        get
        {
            return _characterMaterialIndexProperty.value;
        }
        set
        {
            if (_characterMaterialIndexProperty.value == value) return;
            _characterMaterialIndexProperty.value = value;
            InvalidateReliableLength();
            FireCharacterMaterialIndexDidChange(value);
        }
    }

    public delegate void PropertyChangedHandler<in T>(AvatarParamModel model, T value);
    public event PropertyChangedHandler<string> nicknameDidChange;
    public event PropertyChangedHandler<int> characterModelIndexDidChange;
    public event PropertyChangedHandler<int> characterMaterialIndexDidChange;

    public enum PropertyID : uint
    {
        Nickname = 1,
        CharacterModelIndex = 2,
        CharacterMaterialIndex = 3,
    }

    #region Properties

    private ReliableProperty<string> _nicknameProperty;

    private ReliableProperty<int> _characterModelIndexProperty;

    private ReliableProperty<int> _characterMaterialIndexProperty;

    #endregion

    public AvatarParamModel() : base(null)
    {
        _nicknameProperty = new ReliableProperty<string>(1, _nickname);
        _characterModelIndexProperty = new ReliableProperty<int>(2, _characterModelIndex);
        _characterMaterialIndexProperty = new ReliableProperty<int>(3, _characterMaterialIndex);
    }

    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent)
    {
        _nicknameProperty.UnsubscribeCallback();
        _characterModelIndexProperty.UnsubscribeCallback();
        _characterMaterialIndexProperty.UnsubscribeCallback();
    }

    private void FireNicknameDidChange(string value)
    {
        try
        {
            nicknameDidChange?.Invoke(this, value);
        }
        catch (System.Exception exception)
        {
            UnityEngine.Debug.LogException(exception);
        }
    }

    private void FireCharacterModelIndexDidChange(int value)
    {
        try
        {
            characterModelIndexDidChange?.Invoke(this, value);
        }
        catch (System.Exception exception)
        {
            UnityEngine.Debug.LogException(exception);
        }
    }

    private void FireCharacterMaterialIndexDidChange(int value)
    {
        try
        {
            characterMaterialIndexDidChange?.Invoke(this, value);
        }
        catch (System.Exception exception)
        {
            UnityEngine.Debug.LogException(exception);
        }
    }

    protected override int WriteLength(StreamContext context)
    {
        var length = 0;
        length += _nicknameProperty.WriteLength(context);
        length += _characterModelIndexProperty.WriteLength(context);
        length += _characterMaterialIndexProperty.WriteLength(context);
        return length;
    }

    protected override void Write(WriteStream stream, StreamContext context)
    {
        var writes = false;
        writes |= _nicknameProperty.Write(stream, context);
        writes |= _characterModelIndexProperty.Write(stream, context);
        writes |= _characterMaterialIndexProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }

    protected override void Read(ReadStream stream, StreamContext context)
    {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID))
        {
            var changed = false;
            switch (propertyID)
            {
                case (uint)PropertyID.Nickname:
                    {
                        changed = _nicknameProperty.Read(stream, context);
                        if (changed) FireNicknameDidChange(nickname);
                        break;
                    }
                case (uint)PropertyID.CharacterModelIndex:
                    {
                        changed = _characterModelIndexProperty.Read(stream, context);
                        if (changed) FireCharacterModelIndexDidChange(characterModelIndex);
                        break;
                    }
                case (uint)PropertyID.CharacterMaterialIndex:
                    {
                        changed = _characterMaterialIndexProperty.Read(stream, context);
                        if (changed) FireCharacterMaterialIndexDidChange(characterMaterialIndex);
                        break;
                    }
                default:
                    {
                        stream.SkipProperty();
                        break;
                    }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged)
        {
            UpdateBackingFields();
        }
    }

    private void UpdateBackingFields()
    {
        _nickname = nickname;
        _characterModelIndex = characterModelIndex;
        _characterMaterialIndex = characterMaterialIndex;
    }

}
/* ----- End Normal Autogenerated Code ----- */
